# Readme.md

1. This is laravel project with inertiajs and reactjs
2. for authentication use inertia auth
3. Never update laravel default migration file
4. This is Open Source HRIS SAAS Project
5. Use Tailwind CSS for styling
6. Use shadcn ui for components
7. don't use axios we use inertiajs

# Commit
1. Use conventional commit
2. Use commitlint
3. npm run lint first before commit
4. run vendor/bin/pint first before commit
5. Commit to gitlab and github
6. Before Push update documentation first

# Handling Upload
1. Use Simple Excel from spatie https://github.com/spatie/simple-excel

# Migration
1. scan schema first before create new migration
2. if possible merge migration avoid add column

# Test
1. When run test check on factory associate with model
2. When run test check on controller associate with model
3. When run test check on view associate with model
4. When run test check on route associate with model
5. When run test check on middleware associate with model
6. When run test check on policy associate with model
7. When run test check on model associate with model
8. When run test check on database associate with model
9. When run test check on storage associate with model
10. When run test check on config associate with model
11. When run test check on package associate with model
12. use TestCase
13. don't use /** @test */ use #[Test] attribute instead
14. use PHPUnit\Framework\Attributes\Test;

# Bug fixing
1. Create issue first before fix
2. Fix bug
3. check the issue till all check lists is checked
4. Close the issue

# Organization

## For Organization module hierarchy is company -> branch -> department -> division -> sub-division -> position -> level

1. Company Page
    - Company can has multiple branches
    - Company can has multiple brands
    - user must have primary company
2. Branch Page
3. Department Page
4. Division Page
5. Sub-division Page
6. Position Page
7. Level Page
8. Brand Page
    - user can associate with multiple brands

# Employee

## Rule 
1. We don't use employees table, we use users -> user_details table. Employee is role
2. Employee must have company_id
3. One User can have multiple brands
4. One User can have multiple work schedules
5. One User can have one work shift in a day
6. We not use spatie permission we use role model instead
7. We don't use manager_id in application
8. Role use roles -> user_roles table because 1 users can have multiple roles

1. Employee Page

# Documentation

1. I want to create documentaion for the application so please suggest what's best practice. The documentation is show markdown files from resources/docs folder
2. Because this is Open Source Base application someone can pull and install the application, so please add documentation on how to install the application.
3. If fresh install they should install the application set first company to be primary company.
4. Instalation must be step by step wizard